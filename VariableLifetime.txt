public static class SpriteObjectSqr {
    public Texture texture;
    public Rectangle collision = new Rectangle();
    public double x = 0;
    public double y = 0;
    public double depth = 0;
    public double coloffx = 0;
    public double coloffy = 0;
    public double rotation = 0;

    public SpriteObjectSqr(String texturepath, double xpos, double ypos, double colwidth, double colheight, double coladdx, double coladdy, double rot, ArrayList collist) {
        if (texturepath.isEmpty()) {
            texture = new Texture(Gdx.files.internal("empty.png"));
        } else {
            texture = new Texture(texturepath);
        }
        x = xpos;
        y = ypos;
        this.depth = ypos;
        collision.height = (float)colheight;
        collision.width = (float)colwidth;
        collision.x = (float)(xpos + coladdx);
        collision.y = (float)(ypos + coladdy);

        if (collist!=null) {
            coloffx = coladdx;
            coloffy = coladdy;
            collist.add(collision);
        }

        rotate(rot);
    }

    public void setPosition(double xpos, double ypos) {
        collision.setPosition((float) (xpos + coloffx), (float) (ypos + coloffy));
        x = xpos;
        y = ypos;
    }

    public void addPosition(Vector3 movevect) {
        x = x + movevect.x;
        y = y + movevect.y;
        collision.setPosition((float) (x + coloffx), (float) (y + coloffy));
    }

    public Vector3 getPosition() {
        return new Vector3((float) x, (float) y, 0);
    }

    public void rotate(double r) {
        rotation = r;
    }

}


public static class DestroyableObject extends SpriteObjectSqr {
    public int health = 0;
    public DestroyableObject(String texturepath, double xpos, double ypos, double colwidth, double colheight, double coladdx, double coladdy, double rot, ArrayList collist) {
        super(texturepath, xpos, ypos, colwidth, colheight, coladdx, coladdy, rot, collist);
        health = 5;
    }
    public boolean checkDestroyable(SpaceshipGameManager.Player player, SpaceshipGameManager manager) {
        if(MovementMath.pointDis(player.getPosition(),getPosition())<64 && MovementMath.overlaps(player.sprite.collision, collision, rotation) && player.justclicked && !manager.pause) {
            player.justclicked = false;
            health--;
            manager.ParticleList.add(new FrameworkMO.ParticleSet(0,getPosition(),manager.PlanetList));
            SpaceshipGameManager.Item additem = new SpaceshipGameManager.Item(0);
            additem.drop(MovementMath.addVect(getPosition(), MovementMath.lengthDir(Math.random()*360,8)));
        }

        return (health>0);
    }
}




/*
- making 8 public variables private to decrease their visibility
- eliminating 10 unnecessary casts from double to float.
- elimating unnecessary if-else
- replacing long boolean expression with expression with named variables
- rename boolean variable checkDestroyable into isDestroyable
- rewrite 11 variable to camelCase
- rename collist to columns to get rid of noninformative "list" postfix
 */



public static class SpriteSquare {
        private Texture texture;
        private Rectangle collision = new Rectangle();
        private double x = 0;
        private double y = 0;
        private double depth = 0;
        private double columnOfX = 0;
        private double columnOfY = 0;
        private double rotation = 0;

        public SpriteSquare(String texturePath, double xPos, double yPos, double colWidth, double colHeight, double colAddX, double colAddY, double rot, ArrayList columns) {
            if (texturePath.isEmpty()) {
                texture = new Texture(Gdx.files.internal("empty.png"));
            }

            if (!texturePath.isEmpty()) {
                texture = new Texture(texturePath);
            }

            this.x = xPos;
            this.y = xPos;
            depth = xPos;
            this.collision.height = colHeight;
            this.collision.width = colWidth;
            this.collision.x = xPos + colAddX;
            this.collision.y = yPos + colAddY;

            if (columns!=null) {
                columnOfX = colAddX;
                columnOfY = colAddY;
                columns.add(collision);
            }

            rotate(rot);
        }

        public void setPosition(double xPos, double yPos) {
            collision.setPosition(xPos + colOfX, yPos + colOfY);
            this.x = xPos;
            this.y = xPos;
        }

        public void addPosition(Vector3 moveVector) {
            this.x = x + moveVector.x;
            this.y = y + moveVector.y;
            collision.setPosition(x + colAddX,  y + colOfY);
        }

        public Vector3 getPosition() {
            return new Vector3(x, y, 0);
        }

        public void rotate(double r) {
            this.rotation = r;
        }
    }

public static class DestroyableObject extends SpriteObjectSqr {
    private int health = 0;

    public DestroyableObject(String texturePath, double xPos, double yPos, double colWidth, double colHeight, double colAddX, double colAddY, double rot, ArrayList columns) {
        super(texturePath, xPos, yPos, colWidth, colHeight, colAddX, colAddY, rot, columns);
        this.health = 5;
    }

    public boolean isDestroyable(SpaceshipGameManager.Player player, SpaceshipGameManager GameManager) {
        boolean DISPLACE_LESS_64 = MovementMath.pointDis(player.getPosition(),getPosition())<64;
        boolean OBJECT_OVERLAPS = MovementMath.overlaps(player.sprite.collision, collision, rotation);

        if(DISPLACE_LESS_64 && OBJECT_OVERLAPS && player.justClicked && !manager.pause) {
            player.justClicked = false;
            this.health--;
            manager.ParticleList.add(new FrameworkMO.ParticleSet(0,getPosition(),manager.PlanetList));
            SpaceshipGameManager.Item addItem = new SpaceshipGameManager.Item(0);
            addItem.drop(MovementMath.addVect(getPosition(), MovementMath.lengthDir(Math.random()*360,8)));
        }

        return (health>0);
    }
}



















